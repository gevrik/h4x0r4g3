<div class="panel panel-default draggable map-panel">
    <div class="panel-heading">
        <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h3 class="panel-title"><?php echo $this->translate("system map"); ?></h3>
    </div>
    <div class="panel-body" style="padding: 0;">
        <svg id="map-svg"></svg>
    </div>
</div>
<script>

    var mapWidth = $('.panel-body').innerWidth();
    var mapHeight = $('.panel-body').innerHeight();

    var xcolors = [
        'rgb(199, 199, 199)', // raw
        'rgb(31, 119, 180)', // io
        'rgb(23, 190, 207)', // memory
        'rgb(158, 218, 229)', // storage
        'rgb(219, 219, 141)', // coding
        'rgb(214, 39, 40)', // firewall
        'rgb(44, 160, 44)', // cpu
        'rgb(140, 86, 75)', // market
        'rgb(227, 119, 194)', // bb
        'rgb(148, 103, 189)', // db
        'rgb(188, 189, 34)', // terminal
        'rgb(152, 223, 138)', // publicio
        'rgb(255, 152, 150)', // home
        'rgb(255, 187, 120)', // agent
        'rgb(255, 127, 14)', // bank
        'rgb(127, 127, 127)', // intrusion
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)'
    ];

    $('#map-svg').attr('height', mapHeight);
    $('#map-svg').attr('width', mapWidth);

//    var svg = d3.select("svg"),
//        width = +svg.attr("width"),
//        height = +svg.attr("height");
//
//    var color = d3.scaleOrdinal(d3.schemeCategory20);
//
//    var simulation = d3.forceSimulation()
//        //.force("link", d3.forceLink().distance(20).strength(1))
//        .force("link", d3.forceLink().id(function(d) { return d.id; }))
//        .force("charge", d3.forceManyBody())
//        .force("center", d3.forceCenter(width / 2, height / 2));
//        //.force("x", d3.forceX())
//        //.force("y", d3.forceY());
//
//    graph = <?php //echo $this->json; ?>//;
//
//    var nodes = graph.nodes,
//        nodeById = d3.map(nodes, function (d) {
//            return d.id;
//        }),
//        links = graph.links,
//        bilinks = [];
//
//    links.forEach(function (link) {
//        var s = link.source = nodeById.get(link.source),
//            t = link.target = nodeById.get(link.target),
//            i = {}; // intermediate node
//        nodes.push(i);
//        links.push({source: s, target: i}, {source: i, target: t});
//        bilinks.push([s, i, t]);
//    });
//
//    var link = svg.selectAll(".link")
//        .data(bilinks)
//        .enter().append("path")
//        .attr("class", "link");
//
//    var node = svg.selectAll(".node")
//        .data(nodes.filter(function (d) {
//            return d.id;
//        }))
//        .enter().append("circle")
//        .attr("class", "node")
//        .attr("r", 5)
//        .attr("fill", function (d) {
//            return (d.group === 99) ? '#000000' : color(d.group);
//        })
//        .call(d3.drag()
//            .on("start", dragstarted)
//            .on("drag", dragged)
//            .on("end", dragended));
//
//    node.append("title")
//        .text(function (d) {
//            return (d.group === 99) ? d.id + ' [you are here]' : d.id;
//        });
//
//    simulation
//        .nodes(nodes)
//        .on("tick", ticked);
//
//    simulation.force("link")
//        .links(links);
//
//    function ticked() {
//        link
//            .attr("x1", function(d) { return d.source.x; })
//            .attr("y1", function(d) { return d.source.y; })
//            .attr("x2", function(d) { return d.target.x; })
//            .attr("y2", function(d) { return d.target.y; });
//
//        node
//            .attr("cx", function(d) { return d.x; })
//            .attr("cy", function(d) { return d.y; });
//    }
//
//    function positionLink(d) {
//        return "M" + d[0].x + "," + d[0].y
//            + "S" + d[1].x + "," + d[1].y
//            + " " + d[2].x + "," + d[2].y;
//    }
//
//    function positionNode(d) {
//        return "translate(" + d.x + "," + d.y + ")";
//    }
//
//    function dragstarted(d) {
//        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
//        d.fx = d.x, d.fy = d.y;
//    }
//
//    function dragged(d) {
//        d.fx = d3.event.x, d.fy = d3.event.y;
//    }
//
//    function dragended(d) {
//        if (!d3.event.active) simulation.alphaTarget(0);
//        d.fx = null, d.fy = null;
//    }

    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var color = d3.scaleOrdinal(d3.schemeCategory20);

    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink().id(function(d) { return d.id; }))
        .force("charge", d3.forceManyBody())
        .force("center", d3.forceCenter(width / 2, height / 2));

    graph = <?php echo $this->json; ?>;

        var link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(graph.links)
            .enter().append("line")
            .attr("stroke-width", function(d) { return Math.sqrt(d.value); });

        var node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("circle")
            .data(graph.nodes)
            .enter().append("circle")
            .attr("r", 5)
            .attr("fill", function (d) {
              return (d.group === 99) ? '#000000' : xcolors[d.group];
            })
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        node.append("title")
            .text(function (d) {
                return (d.group === 99) ? d.id + ' [you are here]' : d.id;
            });

        simulation
            .nodes(graph.nodes)
            .on("tick", ticked);

        simulation.force("link")
            .links(graph.links);

        function ticked() {
            link
                .attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

            node
                .attr("cx", function(d) { return d.x; })
                .attr("cy", function(d) { return d.y; });
        }

    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }

</script>
