<div class="panel panel-default draggable map-panel">
    <div class="panel-heading">
        <button type="button" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h3 class="panel-title"><?php echo $this->translate("system map"); ?></h3>
    </div>
    <div class="panel-body" style="padding: 0;">
        <svg id="map-svg"></svg>
    </div>
</div>
<script>

    var panelBody = $('.panel-body');
    var mapSvg = $('#map-svg');
    var mapWidth = panelBody.innerWidth();
    var mapHeight = panelBody.innerHeight();

    var xcolors = [
        'rgb(199, 199, 199)', // INVALID
        'rgb(199, 199, 199)', // raw
        'rgb(31, 119, 180)', // io
        'rgb(23, 190, 207)', // memory
        'rgb(158, 218, 229)', // storage
        'rgb(219, 219, 141)', // coding
        'rgb(214, 39, 40)', // firewall
        'rgb(44, 160, 44)', // cpu
        'rgb(140, 86, 75)', // market
        'rgb(227, 119, 194)', // bb
        'rgb(148, 103, 189)', // db
        'rgb(188, 189, 34)', // terminal
        'rgb(152, 223, 138)', // publicio
        'rgb(255, 152, 150)', // home
        'rgb(255, 187, 120)', // agent
        'rgb(255, 127, 14)', // bank
        'rgb(127, 127, 127)', // intrusion
        'rgb(255, 102, 255)', // monitoring
        'rgb(255, 255, 153)', // recruitment
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)', // io
        'rgb(31, 119, 180)'
    ];

    mapSvg.attr('height', mapHeight).attr('width', mapWidth);

    //create somewhere to put the force directed graph
    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var radius = 8;

    var jsonData = <?php echo $this->json; ?>;
    var nodes_data = jsonData.nodes;
    var links_data = jsonData.links;

    //set up the simulation and add forces
    var simulation = d3.forceSimulation()
        .nodes(nodes_data);

    var link_force = d3.forceLink(links_data)
        .id(function (d) {
            return d.name;
        });

    var charge_force = d3.forceManyBody()
        .strength(-100);

    var center_force = d3.forceCenter(width / 2, height / 2);

    simulation
        .force("charge_force", charge_force)
        .force("center_force", center_force)
        .force("links", link_force)
    ;

    //add tick instructions:
    simulation.on("tick", tickActions);

    //add encompassing group for the zoom
    var g = svg.append("g")
        .attr("class", "everything");

    //draw lines for the links
    var link = g.append("g")
        .attr("class", "links")
        .selectAll("line")
        .data(links_data)
        .enter().append("line")
        .attr("stroke-width", 2)
        .style("stroke", linkColour);

    //draw circles for the nodes
    var node = g.append("g")
        .attr("class", "nodes")
        .selectAll("circle")
        .data(nodes_data)
        .enter()
        .append("circle")
        .attr("r", radius)
        .attr("fill", circleColour);

    node.append("title")
        .text(function (d) {
            return (d.type === 99) ? d.name + ' [you are here]' : d.name;
        });

    //add drag capabilities
    var drag_handler = d3.drag()
        .on("start", drag_start)
        .on("drag", drag_drag)
        .on("end", drag_end);

    drag_handler(node);

    //add zoom capabilities
    var zoom_handler = d3.zoom()
        .on("zoom", zoom_actions);

    zoom_handler(svg);

    /** Functions **/

    //Function to choose what color circle we have
    function circleColour(d) {
        return xcolors[d.type];
    }

    //Function to choose the line colour and thickness
    //If the link type is "A" return green
    //If the link type is "E" return red
    function linkColour(d) {
        if (d.type === "A") {
            return "green";
        } else {
            return "red";
        }
    }

    //Drag functions
    //d is the node
    function drag_start(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;
    }

    //make sure you can't drag the circle outside the box
    function drag_drag(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function drag_end(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }

    //Zoom functions
    function zoom_actions() {
        g.attr("transform", d3.event.transform)
    }

    function tickActions() {
        //update circle positions each tick of the simulation
        node
            .attr("cx", function (d) {
                return d.x;
            })
            .attr("cy", function (d) {
                return d.y;
            });

        //update link positions
        link
            .attr("x1", function (d) {
                return d.source.x;
            })
            .attr("y1", function (d) {
                return d.source.y;
            })
            .attr("x2", function (d) {
                return d.target.x;
            })
            .attr("y2", function (d) {
                return d.target.y;
            });
    }
</script>
